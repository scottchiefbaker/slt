#!/usr/bin/env perl

###############################################################################
# slt - Scott's lookup table
#
# Usage: slt /tmp/data.txt lookup_key
#
# Data store should be a text file in .ini style file or key/value separated
# by either '=' or ':'
###############################################################################

use strict;
use warnings;
use v5.16;
use Getopt::Long;

my $debug = 0;
GetOptions(
	'debug' => \$debug,
);

my $file           = $ARGV[0] || "";
my $filter         = $ARGV[1] || "";
my $is_interactive = (-t STDOUT != 0);
my $warn_str       = color("red", 'Warning:');
my $reset          = color("reset");
my $VERSION        = 'v0.3';

###############################################################################
###############################################################################

# If there is only one param we assume /tmp/slt.txt
if (scalar(@ARGV) == 1 && !-f $ARGV[0]) {
	$filter = $ARGV[0] || "";
	$file   = "/tmp/slt.txt";
}

# Make sure the input file is readable
if (!$file || !-r $file) {
	die(usage());
}

# Read the input data source into a hash
my $data = parse_ini($file);

if ($debug) {
	k($data);
	exit(1);
} elsif ($filter) {
	my $x = $data->{$filter} || "";

	if ($x) {
		print "$x\n";
	} else {
		print STDERR "$warn_str '$filter' not found\n";
		exit(9);
	}
} elsif (!$filter) {
	print "$warn_str No filter specified\n\n";
	k($data);
	exit(1);
}

###############################################################################
###############################################################################

sub parse_ini {
	open (my $INI, "<", $_[0]) or return undef;

	my $ret     = {};
	my $section = "";

	while (my $line = readline($INI)) {
		if ($line =~ /^\[(.+?)\]/) { # Section heading
			$section = $1;
		} elsif ($line =~ /^(\w.*?)\s*[:=]\s*"?(.*?)"?\s*$/) { # Key/Value pair
			my $key   = $1;
			my $value = $2;

			if ($section) {
				$ret->{"$section.$key"} = $value;
			} else {
				$ret->{$key} = $value;
			}
		}
	}

	return $ret;
}

sub trim {
	my ($s) = (@_, $_); # Passed in var, or default to $_
	if (!defined($s) || length($s) == 0) { return ""; }
	$s =~ s/^\s*//;
	$s =~ s/\s*$//;

	return $s;
}

# String format: '115', '165_bold', '10_on_140', 'reset', 'on_173', 'red', 'white_on_blue'
sub color {
	my ($str, $txt) = @_;

	# If we're NOT connected to a an interactive terminal don't do color
	if (-t STDOUT == 0) { return ''; }

	# No string sent in, so we just reset
	if (!length($str) || $str eq 'reset') { return "\e[0m"; }

	# Some predefined colors
	my %color_map = qw(red 160 blue 27 green 34 yellow 226 orange 214 purple 93 white 15 black 0);
	$str =~ s|([A-Za-z]+)|$color_map{$1} // $1|eg;

	# Get foreground/background and any commands
	my ($fc,$cmd) = $str =~ /^(\d{1,3})?_?(\w+)?$/g;
	my ($bc)      = $str =~ /on_(\d{1,3})$/g;

	# Some predefined commands
	my %cmd_map = qw(bold 1 italic 3 underline 4 blink 5 inverse 7);
	my $cmd_num = $cmd_map{$cmd // 0};

	my $ret = '';
	if ($cmd_num)     { $ret .= "\e[${cmd_num}m"; }
	if (defined($fc)) { $ret .= "\e[38;5;${fc}m"; }
	if (defined($bc)) { $ret .= "\e[48;5;${bc}m"; }
	if ($txt)         { $ret .= $txt . "\e[0m";   }

	return $ret;
}

sub usage {
	my $str = color('yellow', "SLT version: $VERSION\n\n");
	$str   .= color('white', "Usage: ");
	$str   .= "$0 input.txt lookup_key\n";

	return $str;
}

# Debug print variable using either Data::Dump::Color (preferred) or Data::Dumper
# Creates methods k() and kd() to print, and print & die respectively
BEGIN {
	if (eval { require Data::Dump::Color }) {
		*k = sub { Data::Dump::Color::dd(@_) };
	} else {
		require Data::Dumper;
		*k = sub { print Data::Dumper::Dumper(\@_) };
	}

	sub kd {
		k(@_);

		printf("Died at %2\$s line #%3\$s\n",caller());
		exit(15);
	}
}

# vim: tabstop=4 shiftwidth=4 autoindent softtabstop=4
